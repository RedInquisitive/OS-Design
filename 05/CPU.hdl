// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=Amode);
	Not(in=Amode, out=Cmode); //Rename to Cmode from instruction[15]
	
	//Will C mode write to the A register?
	And(a=Cmode, b=instruction[5], out=ALUtoA);
	Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Ain);
	
	//if in A mode or if C mode's destination is A, put a load on the A register.
	//Also, write to the memory bus.
	Or(a=Amode, b=ALUtoA, out=Aload);
	ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);
	
	//Get A or M depending on bit 12
	Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);

	//Get D register
	And(a=Cmode, b=instruction[4], out=Dload);
	DRegister(in=ALUout, load=Dload, out=Dout);
	
	//Run the instruction on the ALU.
	ALU(x=Dout, y=AMout, 
		zx=instruction[11], 
		nx=instruction[10], 
		zy=instruction[9], 
		ny=instruction[8], 
		f=instruction[7],
		no=instruction[6], 
		
		out=ALUout, 
		out=outM,
		zr=zero,
		ng=negative);
	
	//Calculate positivie
	Or(a=zero, b=negative, out=lessOrEqual);
	Not(in=lessOrEqual, out=positive);
	
	//Do we need to ACTUALLY write to the memory?
	And(a=Cmode, b=instruction[3], out=writeM);
	
	//Calculate the jump modifications to the program counter.
	//jump if greater than zero?
	And(a=instruction[0], b=positive,	out=jgt);
	
	//jump if zero?
	And(a=instruction[1], b=zero, 		out=jeq);    
	
	//jump if less than zero?
	And(a=instruction[2], b=negative, 	out=jlt);   
	
	//About to jump?
	Or(a=jeq, b=jlt, out=jle);
	Or(a=jle, b=jgt, out=jmp);
	And(a=Cmode, b=jmp, out=PCload);
	
	//Increase the program counter?
	Not(in=PCload, out=PCinc);
	PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}