// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static int powers;
	
    /** Initializes the library. */
    function void init() {
		//cant use for loop because * uses this function....
	
		let powers = Array.new(16);
        let powers[0] = 1;
        let powers[1] = 2;
        let powers[2] = 4;
        let powers[3] = 8;
        let powers[4] = 16;
        let powers[5] = 32;
        let powers[6] = 64;
        let powers[7] = 128;
        let powers[8] = 256;
        let powers[9] = 512;
        let powers[10] = 1024;
        let powers[11] = 2048;
        let powers[12] = 4096;
        let powers[13] = 8192;
        let powers[14] = 16384;
        let powers[15] = 16384+16384;
		return;
    }
	
	function boolean bit(int x, int n) {
		return ~((x & powers[n]) = 0);
    }
    
	function int pow(int power) {
		return powers[power];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if( x < 0 ) {
			let x = -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, altx, mult;
		
		let sum = 0;
		let altx = x;
		let mult = 0;
		while ( mult < 16 ) {
            if (Math.bit(y, mult)) {
                let sum = sum + altx;
            }
            let altx = altx + altx;
            let mult = mult + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int neg_x, neg_y;
		var int q;
		var int result;

		let neg_x = x < 0;
		let neg_y = y < 0;
		let x = Math.abs(x);
		let y = Math.abs(y);

		//base to end
		if ( y > x ) {return 0;}
		
		//recursion
		let q = Math.divide(x, y+y);
		if ( x-(2*q*y) < y ) {
			let result = q+q;
		} else {
			let result = q+q+1;
		}

		if ( neg_x = neg_y ) {
			return result;
		} else {
			return -result;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j, y;
		var int approx;
		var int approx_squared;

		let y = 0;
		let j = 7;      // = #bits / 2 - 1
		while ( ~(j < 0) ) {
			let approx = y + powers[j];
			let approx_squared = approx * approx;
			if ( ~(approx_squared > x) & (approx_squared > 0) ) {    // in case of overflow
				let y = approx;
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if( a > b ) {return a;}
		else {return b;}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if( a < b ) {return a;}
		else {return b;}
    }
}
