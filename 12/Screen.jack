// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screen;
	static boolean cur_colour;
	static int white_pixel;
	static int black_pixel;
	static boolean white;
	static boolean black;
    
    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let white = false;
		let black = true;
		let white_pixel = 0;
		let black_pixel = 1;
		let cur_colour = black;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		
		//clear
		while ( i < 8192 ) { let screen[i] = white;}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let cur_colour = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address;
		var int mask;
		
		//using the power implemented in math
		let address = (y*32) + (x/16);
		let mask = Math.pow((x & 15));
		
		//get bit from byte
		if ( cur_colour ) {
			let screen[address] = screen[address] | mask;
		} else {
			let screen[address] = screen[address] & ~mask;
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;     

		//swap
        if ( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
		
		//differences
        let dx = x2 - x1;
        let dy = y2 - y1;      

		//use best method
        if ( dx = 0 ) {
            do Screen.drawVerticalLine( x1, y1, y2 );
        } else { //this is why we have else if
			if( dy = 0 ) {
				do Screen.drawHorizontalLine( x1, x2, y1 );
			} else {
				do Screen.drawDiagonalLine( x1, y1, x2, y2, dx, dy );
			}
		}     
        return;
    }

	function void drawHorizontalLine( int x1, int x2, int y ) {
		var int addrStart, addrEnd;
		var int lhs, rhs;  

		//sub bits
		let lhs = x1 & 15;
		let rhs = x2 & 15;
		
		//similar to set pixel
		let addrStart = (y*32) + (x1/16);
		let addrEnd = (y*32) + (x2/16) + (rhs=0);
		
		//start and end in same int
		if ( addrStart = addrEnd ) {   
			do Screen.subHorizontalLine( x1, x2, y );
		} else { 
		
			//short left hand side
			if( ~(lhs = 0) ) { 
				let addrStart = addrStart + 1;
				do Screen.subHorizontalLine( x1, x1+16-lhs, y );
			}
			
			//short right hand side
			if( ~(rhs = 0) ) {
				let addrEnd = addrEnd - 1;
				do Screen.subHorizontalLine( x2-rhs, x2, y );
			}
			
			//very fast inner line
			while( ~(addrStart > addrEnd) ) {
				let screen[addrStart] = cur_colour;
				let addrStart = addrStart + 1;
			}
		}      
		return;
    }
	
	function void drawVerticalLine( int x, int y1, int y2 ) {
		var int temp;       
		if ( y1 > y2 ) {
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}
		
		//lazy draw
		while( ~(y1 > y2) ) {
			do Screen.drawPixel( x, y1 );
			let y1 = y1 + 1;
		}
        return;
    }
	
	function void drawDiagonalLine( int x1, int y1, int x2, int y2, int dx, int dy ) {
        var int a, b;
        var int adyMinusbdx;
        var int changeY;
		
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;        
        if( dy < 0 ) {
            let changeY = -1;
        } else {
            let changeY = 1;
        }
		
		//fast algo as the error approaches high, reset
        while ( ~(a > dx) & (((changeY = 1) & ~(b > dy)) | ((changeY = -1) & ~(b < dy))) ) {
            do Screen.drawPixel( x1 + a, y1 + b );
            if ( adyMinusbdx < 0 ) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy * changeY);
            } else {
                let b = b + changeY;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }
	
	function void subHorizontalLine( int x1, int x2, int y ) {
		while ( ~(x1 > x2) ) {
			do Screen.drawPixel( x1, y );
			let x1 = x1 + 1;
		}   
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	    var int y;
		
		//box
        let y = y1;
        while ( ~(y > y2) ) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int diffX, diffY;
        var int square;       
        let diffY = -r;
        let square = r*r;
        while ( ~(diffY > r) ) {
            let diffX = Math.sqrt(square-(diffY*diffY));
            do Screen.drawHorizontalLine( x-diffX, x+diffX, y+diffY );
            let diffY = diffY + 1;
        }
        return;
    }
}
