class Mandelbrot {
	field int ITERATIONS;
	field int COLORS;
	field int WIDTH;
	field int HEIGHT;
	field Array colors;
	field String printRow;
	field String printCol;
	field String printSpace;
	field boolean ascii;
	
	constructor Mandelbrot new(boolean asc) {
		let ascii = asc;
		if (ascii) {
			let ITERATIONS = 64;
			let COLORS = 64;
			let WIDTH = 64;
			let HEIGHT = 22;
			let colors = color();
		} else {
			let ITERATIONS = 32;
			let COLORS = 2;
			let WIDTH = 128;
			let HEIGHT = 64;
		}
		
		let printRow = "Row: ";
		let printCol = ", Col: ";
		let printSpace = " ";
		
		return this;
	}
	
	method Array color() {
		var Array symbol;
		let symbol = Array.new(COLORS);
		let symbol[63] = "$";
		let symbol[62] = "@";
		let symbol[61] = "B";
		let symbol[60] = "%";
		let symbol[59] = "8";
		let symbol[58] = "&";
		let symbol[57] = "W";
		let symbol[56] = "M";
		let symbol[55] = "#";
		let symbol[54] = "*";
		let symbol[53] = "o";
		let symbol[52] = "a";
		let symbol[51] = "h";
		let symbol[50] = "k";
		let symbol[49] = "Z";
		let symbol[48] = "O";
		let symbol[47] = "0";
		let symbol[46] = "Q";
		let symbol[45] = "L";
		let symbol[44] = "C";
		let symbol[43] = "J";
		let symbol[42] = "U";
		let symbol[41] = "Y";
		let symbol[40] = "X";
		let symbol[39] = "z";
		let symbol[38] = "c";
		let symbol[37] = "v";
		let symbol[36] = "u";
		let symbol[35] = "n";
		let symbol[34] = "x";
		let symbol[33] = "r";
		let symbol[32] = "j";
		let symbol[31] = "f";
		let symbol[30] = "t";
		let symbol[29] = "/";
		let symbol[28] = "\\";
		let symbol[27] = "|";
		let symbol[26] = "(";
		let symbol[25] = ")";
		let symbol[24] = "1";
		let symbol[23] = "{";
		let symbol[22] = "}";
		let symbol[21] = "[";
		let symbol[20] = "]";
		let symbol[19] = "?";
		let symbol[18] = "-";
		let symbol[17] = "_";
		let symbol[16] = "+";
		let symbol[15] = "~";
		let symbol[14] = "<";
		let symbol[13] = ">";
		let symbol[12] = "i";
		let symbol[11] = "!";
		let symbol[10] = "l";
		let symbol[9] = "I";
		let symbol[8] = ";";
		let symbol[7] = ":";
		let symbol[6] = ",";
		let symbol[5] = "\"";
		let symbol[4] = "^";
		let symbol[3] = "`";
		let symbol[2] = "'";
		let symbol[1] = ".";
		let symbol[0] = " ";
		return symbol;
	}
	
	method void calculate() {
		var int row;
		var int col;
		var int iteration; 	
		var int color;
		var FastFloat real;
		var FastFloat imag;
		var FastFloat x_new;
		var FastFloat y_new;
		var FastFloat x; 
		var FastFloat y;	
		
		let row = 0;
		while (row < HEIGHT) {
			let col = 0;
			while (col < WIDTH) {
				do Output.moveCursor(0,0);
				do Output.printString(printRow);
				do Output.printInt(row);
				do Output.printString(printCol);
				do Output.printInt(col);
				do Output.printString(printSpace);
				
				//real = (col - WIDTH/2.0)*4.0/WIDTH;
				let real = component(col, WIDTH);
				
				//imag = (row - HEIGHT/2.0)*4.0/WIDTH;
				let imag = component(row, HEIGHT);
				
				let x = FastFloat.new();
				let y = FastFloat.new();
				let iteration = 0;
				
				while (compareXY(x, y) & (iteration < ITERATIONS)) {
					let x_new = FastFloat.newFastFloat(x);
					let y_new = FastFloat.newFastFloat(y);
					
					//x_new = x*x - y*y + real;
					do x_new.mult(x);
					do y_new.mult(y);
					do x_new.sub(y_new);
					do x_new.add(real);
					
					//y_new = 2.0*x*y + imag;
					do y_new.setInt(2);
					do y_new.mult(x);
					do y_new.mult(y);
					do y_new.add(imag);
					
					do x.dispose();
					do y.dispose();
					let x = x_new;
					let y = y_new;
					 
					let iteration = iteration + 1;
				}
				
				let color = iteration - 1;
				if (color < 0) {
					let color = 0;
				}
				
				if (ascii) {
					do Output.moveCursor(row + 1, col);
					do Output.printString(colors[color]);
				} else {
					if (iteration < ITERATIONS) {
						do Screen.setColor(false);
						do Screen.drawPixel(col, row + 12);
					} else {
						do Screen.setColor(true);
						do Screen.drawPixel(col, row + 12);
					}
				}
				
				do x.dispose();
				do y.dispose();
				do real.dispose();
				do imag.dispose();
				let col = col + 1;
			}
			let row = row + 1;
		}
		return;
	}
	
	/**
	 * Squares x and y and returns if it is <= 4.
	 */
	method boolean compareXY(FastFloat x, FastFloat y) {
		var FastFloat xsq; 
		var FastFloat ysq; 
		var int compare;
		
		let xsq = FastFloat.newFastFloat(x);
		let ysq = FastFloat.newFastFloat(y);
		do xsq.mult(x);
		do ysq.mult(y);
		do xsq.add(ysq);
		let compare = xsq.compareInt(4);
		
		do xsq.dispose();
		do ysq.dispose();
		
		//the <= operator
		if (compare = 1) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 * Returns a component of a set depending on the position
	 * of the for loop and the total size of the for loop.
	 */
	method FastFloat component( int pos, int size) {
		var FastFloat fpos; 
		var FastFloat fsize; 
		let fpos = FastFloat.new();
		let fsize = FastFloat.new();
		
		do fpos.setInt(pos);
		do fsize.setInt(size);
		do fsize.divInt(2);
		do fpos.sub(fsize);
		do fpos.multInt(5);
		do fpos.divInt(WIDTH);
		
		do fsize.dispose();
		return fpos;
	}
	
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
}