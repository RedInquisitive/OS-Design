// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int buffSize;
    field int strLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let buffSize = maxLength;
        let strLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(buffer);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return strLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if ( strLen < buffSize ) {
            let buffer[strLen] = c;
            let strLen = strLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	    if ( strLen > 0 ) {
            let strLen = strLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	    var int intVal;
        var int i;
        var boolean neg;
		
        let intVal = 0;       
        if( (strLen > 0) & (buffer[0] = 45) ) { //minus
            let neg = true;
            let i = 1;
        } else {
            let neg = false;
            let i = 0;
        }
		
        while ( (i < strLen) & String.digit(buffer[i]) ) {
            let intVal = (intVal * 10) + String.toInt(buffer[i]);
            let i = i + 1;
        }       
        
		if( neg ) {
            return -intVal;
        } else {
            return intVal;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let strLen = 0;   
        if ( val < 0 ) {
            let val = -val;
            do appendChar(45); //neg
        }
		
		//begin recursion
        do do_set_int(val);
        return;
    }

    method void do_set_int(int val) {
        var int ten;
        var int mod;
        var char c;   
		
		//base 10
        let ten = val / 10;
        let mod = val - (ten*10);
        let c = String.toChar(mod);  

		//slice on numbers
        if ( val < 10 ) {
            do appendChar(c);
        } else {
            do do_set_int(ten);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
	
	/** Returns true within the range of a digit */
    function boolean digit(char c) {
        return ~(c < 48) & ~(c > 57);
    }
    
    /** char to int */
    function int toInt(char c) {
        return c - 48;
    }
    
    /** int to char (must have 0<=value<=9) */
    function char toChar(int i) {
        return i + 48;
    }
	
}
